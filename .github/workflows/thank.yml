name: thanks

on:
  issues:
    types: [opened]
  workflow_dispatch:

jobs:
  thanks:
    runs-on: ubuntu-latest

    steps:
      - name: Dump Github Context
        run: echo "${{ toJson(github) }}"

      - name: Dump Environment Variables
        run: env

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: pip install requests

      - name: Thank the contributor
        id: issue_script
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
          REPO: ${{ github.repository }}
        run: |
          import os
          import requests

          token = os.getenv("GITHUB_TOKEN")
          issue_number = os.getenv("ISSUE_NUMBER")
          repo = os.getenv("REPO")  # Format: owner/repo

          headers = {
              "Authorization": f"Bearer {token}",
              "Accept": "application/vnd.github+json"
          }

          owner, repo_name = repo.split("/")

          # Add a comment
          comment_url = f"https://api.github.com/repos/{owner}/{repo_name}/issues/{issue_number}/comments"
          comment_body = {"body": "Thanks for your contribution!"}
          comment_res = requests.post(comment_url, headers=headers, json=comment_body)
          print(f"Comment response: {comment_res.status_code}")
          print(comment_res.json())

          # Add label
          label_url = f"https://api.github.com/repos/{owner}/{repo_name}/issues/{issue_number}/labels"
          label_body = {"labels": ["todo-review"]}
          label_res = requests.post(label_url, headers=headers, json=label_body)
          print(f"Label response: {label_res.status_code}")
          print(label_res.json())

          # Return the comment ID
          with open(os.environ["GITHUB_OUTPUT"], "a") as f:
              f.write(f"comment_id={comment_id}\n")

      - run: echo 'comment id=${{ steps.issue_script.outputs.comment_id }}'
