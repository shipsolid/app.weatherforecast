# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: WeatherForecast.service

on:
  # # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    # inputs:
    #   example-input:
    #     description: 'An example input for the workflow'
    #     required: false
    #     default: 'default value'
    #   environment:
    #     description: 'Environment to deploy to'
    #     required: true
    #     default: 'staging'

  # # Triggers the workflow on deployment events
  # deployment:

  push:
    # # Triggers the workflow on push events to the main branch
    branches: [ "main" ]

    # # Triggers the workflow on push events to any branch
    # branches: [ '**' ]

    # # paths specifies which files to monitor for changes
    # # If any of the specified files are changed, the workflow will run
    paths:
      # # Include all C# files in the repository
      # - '**/*.cs'
      # # Include all files in the WeatherForecast.service directory
      - 'WeatherForecast.service/**'
      # # Include the .github/workflows/dotnet.yml file
      - '.github/workflows/WeatherForecast.service.yml'

  # pull_request:
    # branches: [ "main" ]

  # schedule:

    # # ┌──────── minute (0 - 59)
    # # │ ┌────── hour (0 - 23)
    # # │ │ ┌──── day of the month (1 - 31)
    # # │ │ │ ┌── month (1 - 12)
    # # │ │ │ │ ┌─ day of the week (0 - 6) (Sunday = 0)
    # # │ │ │ │ │
    # # │ │ │ │ │
    # # * * * * *

    # # Runs at midnight UTC(00:00) every day
    # - cron: '0 0 * * *'
    
    # # Runs every 5 minutes
    # - cron: '*/5 * * * *'

    # # Runs every Monday at 8:00 AM UTC
    # - cron: '0 8 * * 1'

jobs:
  # Name of the job
  build:

    runs-on: ubuntu-latest

    # # Default variable - values for the job
    defaults:
      run:
        working-directory: ./WeatherForecast.service

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
        # # prefer built‑in caching in actions/setup-dotnet
        # cache: true

    # # Cache NuGet packages
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        # # Specifies the directory to cache. This is where NuGet stores downloaded packages globally.
        path: ~/.nuget/packages
        # # The key for the cache. It can include the OS and a hash of the packages.lock.json file to ensure cache is updated when dependencies change.
        # # A unique identifier for the cache. If this key matches a previous run, the cache will be restored.
        # # Hash of the packages.lock.json file. If this file changes (i.e., dependencies change), the key changes and a new cache will be created.
        key: nuget-${{ runner.os }}-${{ hashFiles('**/packages.lock.json') }}
        # # Fallback keys to look for if the exact cache key isn’t found. Helps with partial matches and cache reuse.
        # # This allows the cache to be reused across different runs, even if the exact key isn't found.
        restore-keys: |
          nuget-${{ runner.os }}-

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore --configuration Release
      # working-directory: ./WeatherForecast.service

    - name: Test
      run: dotnet test --no-build --verbosity normal

    # # Start the app on http://localhost:5101 in background
    - name: Run API
      run: |
        export ASPNETCORE_URLS="http://localhost:5101"
        nohup dotnet run --no-build --configuration Release --project WeatherForecast.service.csproj > app.log 2>&1 &
        echo $! > app.pid

    # # Wait for readiness (up to 30s)
    - name: Wait for API
      run: |
        for i in {1..30}; do
          if curl -sSf http://localhost:5101/weatherforecast > /dev/null; then
            echo "API is up"; exit 0
          fi
          sleep 1
        done
        echo "API did not become ready"; echo "---- app.log ----"; tail -n +1 app.log
        exit 1

    # # Do assertions on the response
    - name: Hit endpoint and assert
      run: |
        body=$(curl -sS http://localhost:5101/weatherforecast)
        echo "$body"
        # simple sanity check: ensure array with at least 1 item
        test "$(echo "$body" | jq 'length >= 1')" = "true"

    # # Always stop the app
    - name: Stop API
      if: always()
      run: |
        kill $(cat app.pid) || true
        rm -f app.pid

    - name: Publish code
      run: dotnet publish -c Release --property:PublishDir="${{env.DOTNET_ROOT}}\app"

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: WeatherForecast.service
        path: ${{env.DOTNET_ROOT}}\app


  image:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      # # Permissions to write to the GitHub Container Registry
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # needed for versioning/tag lookup

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Show available builders (optional)
        run: docker buildx ls

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Image
        run: ./push.sh
        working-directory: WeatherForecast.service

      # - name: Build and push
      #   run: |
      #     docker buildx build --push -t ghcr.io/${{ github.repository_owner }}/my-app:latest .

  # deploy:
  #   runs-on: ubuntu-latest
  #   environment:
  #     name: production
  #     url: ${{ steps.deploy.outputs.webapp-url }}
  #   needs: build
  #   steps:
  #     - uses: azure/login@v2
  #       with:
  #         creds: ${{ secrets.AZURE_CREDENTIALS }}
  #     - uses: azure/webapps-deploy@v3
  #       id: deploy
  #       with:
  #         app-name: gh-actions-web-api
  #         images: ghcr.io/shipsolid/my-app:latest
  #         resource-group-name: gh-actions