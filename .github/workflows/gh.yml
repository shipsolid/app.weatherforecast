name: gh

on:
  push:
    paths:
      - ".github/workflows/gh.yml"
  workflow_dispatch: # manual

env:
  WORKFLOW_VAR_1: "Workflow level variable"

jobs:
  cli:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      # utility/debug pipeline
      - uses: actions/checkout@v4
      - run: env                          # Show environment variables
      - run: echo "${{ toJson(github) }}" # Show GitHub context
      - run: gh --version                 # Show GitHub CLI version
      - run: gh auth status               # Check authentication status
      - run: gh repo list --limit 5       # List repositories
      - run: gh issue list --limit 5      # List issues
      - run: gh workflow list --limit 5   # List workflows
      - run: gh pr list --limit 5         # List pull requests
      - run: gh release list --limit 5    # List releases
      - run: gh api /repos/:owner/:repo                   # Get repository details
      - run: gh api /repos/:owner/:repo/issues            # Get issues
      - run: gh api /repos/:owner/:repo/pulls             # Get pull requests
      - run: gh api /repos/:owner/:repo/releases          # Get releases
      - run: gh api /repos/:owner/:repo/actions/workflows # Call GitHub REST API directly to list workflows
      - run: gh api /repos/:owner/:repo/actions/runs      # Get action runs
      - run: gh api /repos/:owner/:repo/actions/artifacts # Get action artifacts
      - run: gh api /repos/:owner/:repo/commits           # Get commits
      - run: gh api /repos/:owner/:repo/branches          # Get branches
      - run: gh api /repos/:owner/:repo/collaborators     # Get collaborators
      # - run: gh api /repos/:owner/:repo/teams             # Get teams (GH_TOKEN: ${{ secrets.GH_PAT }})
      - run: gh api /repos/:owner/:repo/labels            # Get labels

      # 🧪 Test a real GitHub API call
      - name: Get Open PR count via REST API
        run: |
          gh api \
            -H "Accept: application/vnd.github+json" \
            /repos/${{ github.repository }}/pulls \
            | jq length

      # 🛠️ Create an issue (dry-run mode)
      - name: Test issue creation (dry-run)
        run: echo "Would run gh issue create --title 'Sample' --body 'Created by GH CLI'"

      # 📤 Upload Artifact of GH CLI Outputs
      - name: Save gh outputs
        run: |
          gh repo view --json name,visibility > gh_output.json
        shell: bash

      - uses: actions/upload-artifact@v4
        with:
          name: gh-cli-output
          path: gh_output.json

  Custom-Env-Variables:
    runs-on: ubuntu-latest

    steps:

      - name: write value to $GITHUB_ENV file
        run: echo "VAR_1=value set from first step" >> "$GITHUB_ENV"

      - name: dispaly value of VAR_1
        run: echo "Value of VAR_1 is $VAR_1"

      - name: Set color
        id: color-selector
        run: echo "SELECTED_COLOR=green" >> "$GITHUB_OUTPUT"
      - name: Get color
        env:
          SELECTED_COLOR: ${{ steps.color-selector.outputs.SELECTED_COLOR }}
        run: echo "The selected color is $SELECTED_COLOR"

  Linux-Runner-Job:
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/main' }} # Only run if on the main branch
    
    steps:
      - run: env
        
      # print triggering event name

      - name: Print Event (Runner Environment Variable)
        run: echo "Trigger event is $GITHUB_EVENT_NAME"

      - name: Print Event (Context Variable)
        run: echo "Home directory is ${{ github.event_name }}"

      - name: Conditional for pull requests
        run: echo "This is being triggered from a pull request!"
        if: ${{ github.event_name == 'pull_request' }} # Run only for pull requests
        
      # print home directory

      - name: Print Home Directory (Runner Environment Variable)
        run: echo "Home directory is $HOME"

      - name: Print Home Directory (Context Variable)
        run: echo "Home directory is ${{ runner.home }}"

  Windows-Runner-Job:
    runs-on: windows-latest
    
    steps:
      - run: env

      # print triggering event name

      - name: Print Event (Runner Environment Variable)
        run: echo "Trigger event is $env:GITHUB_EVENT_NAME"

      - name: Print Event (Context Variable)
        run: echo "Home directory is ${{ github.event_name }}"

      # print home directory
        
      - name: Print Home Directory (Runner Environment Variable)
        run: echo "Home directory is $env:USERPROFILE"
      
      - name: Print Home Directory (Context Variable)
        run: echo "Home directory is ${{ runner.home }}"

  Overwrite-Job-Variable:
    runs-on: ubuntu-latest

    # Job-level environment variables
    env:
      VAR_1: "Job level variable value"

    steps:
      - name: Display job-level variable
        run: |
          echo "VAR_1: $VAR_1"

      - name: Override VAR_1 at step level
        env:
          VAR_1: "Step level variable value" # This will override the job-level VAR_1
        run: |
          echo "VAR_1: $VAR_1"

      - name: Show VAR_1 value after step override
        run: echo "Value of VAR_1 is $VAR_1"