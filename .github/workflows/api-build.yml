# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: api-build

on:
  # # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    # inputs:
    #   example-input:
    #     description: 'An example input for the workflow'
    #     required: false
    #     default: 'default value'
    #   environment:
    #     description: 'Environment to deploy to'
    #     required: true
    #     default: 'staging'

  push:
    # # Triggers the workflow on push events to the main branch
    branches: [ "main" ]

    # # Triggers the workflow on push events to any branch
    # branches: [ '**' ]

    # # paths specifies which files to monitor for changes
    # # If any of the specified files are changed, the workflow will run
    # paths:
      # # Include all C# files in the repository
      # - '**/*.cs'
      # # Include all files in the WeatherForecast.service directory
      # - 'WeatherForecast.service/**'
      # # Include the .github/workflows/dotnet.yml file
      # - '.github/workflows/dotnet.yml'

  # pull_request:
    # branches: [ "main" ]

  # schedule:

    # # ┌──────── minute (0 - 59)
    # # │ ┌────── hour (0 - 23)
    # # │ │ ┌──── day of the month (1 - 31)
    # # │ │ │ ┌── month (1 - 12)
    # # │ │ │ │ ┌─ day of the week (0 - 6) (Sunday = 0)
    # # │ │ │ │ │
    # # │ │ │ │ │
    # # * * * * *

    # # Runs at midnight UTC(00:00) every day
    # - cron: '0 0 * * *'
    
    # # Runs every 5 minutes
    # - cron: '*/5 * * * *'

    # # Runs every Monday at 8:00 AM UTC
    # - cron: '0 8 * * 1'

jobs:
  # Name of the job
  build:

    runs-on: ubuntu-latest

    # # Default variable - values for the job
    defaults:
      run:
        working-directory: ./WeatherForecast.service

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
        # # prefer built‑in caching in actions/setup-dotnet
        # cache: true

    # # prefer built‑in caching in actions/setup-dotnet
    # - name: Cache NuGet packages
    #   uses: actions/cache@v4
    #   with:
    #     # # Specifies the directory to cache. This is where NuGet stores downloaded packages globally.
    #     path: ~/.nuget/packages
    #     # # The key for the cache. It can include the OS and a hash of the packages.lock.json file to ensure cache is updated when dependencies change.
    #     # # A unique identifier for the cache. If this key matches a previous run, the cache will be restored.
    #     # # Hash of the packages.lock.json file. If this file changes (i.e., dependencies change), the key changes and a new cache will be created.
    #     key: nuget-${{ runner.os }}-${{ hashFiles('**/packages.lock.json') }}
    #     # # Fallback keys to look for if the exact cache key isn’t found. Helps with partial matches and cache reuse.
    #     # # This allows the cache to be reused across different runs, even if the exact key isn't found.
    #     restore-keys: |
    #       nuget-${{ runner.os }}-

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore
      # working-directory: ./WeatherForecast.service

    - name: Test
      run: dotnet test --no-build --verbosity normal
